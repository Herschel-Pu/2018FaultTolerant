//1motor_sensor.ino


#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif
#include <Servo.h>
#include <ros.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <geometry_msgs/Pose.h>
#include <tf/tf.h>

double wl;
//#include<Filter.h>
//ExponentialFilter<long> ADCFilter(10,0);
//Define ports for Left encoder
#define LeftEncoderInterruptA 0
#define LeftEncoderInterruptB 1
//set up variables foe left encoder

volatile bool _LeftEncoderASet;
volatile bool _LeftEncoderBSet;
volatile bool _LeftEncoderAPrev;
volatile bool _LeftEncoderBPrev;
volatile long _LeftEncoderTicks = 0;
long left_encoder_vec[100];
long time_vector[100];
float current_amp[20];
//only set it up once
volatile int tcnt2 = 236;
//volatile int tcnt2 = 99;
int vel_window,buf_size=100;
long enc_prev,count_enc=0;
int buffer_size=20;
volatile int count_crt=0;
float D_S_l;
float D_S_r;
float x=0,y=0,theta=0;
volatile float sum=0;
float dt;
//Time
unsigned long current_time, previous_time;
long t=0,prev_micros = 0;


// ros message set up
ros::NodeHandle nh;
std_msgs::Float32 Wl_msg;
std_msgs::Int32 counter_left;
std_msgs::Float32 current;
std_msgs::Float32 voltage;
//ros publishers setup
ros::Publisher W_l("Vel_sens/wl", &Wl_msg);
ros::Publisher cnt_left("Count_left", &counter_left);
ros::Publisher crt("current",&current);
ros::Publisher vtg("voltage",&voltage);

int value = 0;
//float smooth = 0;
//float x_new = 0;
float i_new ;
float i_pre ;
float y_new;
float y_prev;
//Servo Initialization
Servo servo;

//Subscriber Callback Functions left motor
void left_vel( const std_msgs::Float32& cmd_msg2)
{
	double wl=(saturation(cmd_msg2.data)*(-500))+1500;
	//servo2.write(cmd_msg2.data); //set servo angle, should be from 0-180
	servo.writeMicroseconds(wl);
}



//Main Function ROS
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void read_sensors()
{
	float Left_vrad_l=0;
	float dt;
	long Left_Nticks;
	if(count_enc<buf_size)
	{
		left_encoder_vec[count_enc] = _LeftEncoderTicks;
		time_vector[count_enc]= micros();
		count_enc++;
	}
	else
	{
		for(int i=0;i<buf_size-1;i++)
			left_encoder_vec[i] = left_encoder_vec[i+1];
		for(int i=0;i<buf_size-1;i++)
			time_vector[i] = time_vector[i+1];
		
		left_encoder_vec[buf_size-1] = _LeftEncoderTicks;
		// Serial.println(_LeftEncoderTicks);
		time_vector[buf_size-1] = micros();
	}
	
	Left_Nticks = left_encoder_vec[count_enc-1] - left_encoder_vec[count_enc-2];
	D_S_l=((float)Left_Nticks/400)*(M_PI*0.1016);
	x+=(D_S_r+D_S_l)/2*cos(theta);
	y+=(D_S_r+D_S_l)/2*sin(theta);
	theta+=(D_S_r-D_S_l)/0.365;
	enc_prev = count_enc - vel_window - 1;
	if(enc_prev<0)
		enc_prev = 0;

	Left_Nticks = left_encoder_vec[count_enc-1] - left_encoder_vec[enc_prev];
	dt=(float)(time_vector[count_enc-1] - time_vector[enc_prev])/1e+6;
	if(dt<0 || dt>1)
		dt = 0.15;

	Left_vrad_l=(((float)Left_Nticks*2*M_PI)/400)/dt; //velocity in radians per second


	//Publish encoder readings
	Wl_msg.data=(Left_vrad_l);
	W_l.publish(&Wl_msg);
}


void read_current()
{
	float crtvalue;
	float vtgvalue;
	value = analogRead(A0);
	vtgvalue = float(value)/1024*5;
	y_new = vtgvalue;
	//y_new = 0.1*y_new+0.9*y_prev;
	voltage.data = vtgvalue;
	crtvalue = (abs(y_new - 2.53))/0.185;
	y_prev = y_new;
	if(count_crt<buffer_size)
	{
		current_amp[count_crt] = float(crtvalue);
		sum += current_amp[count_crt];
		count_crt++;
	}
	else if(count_crt==buffer_size)
	{
		i_new = sum/buffer_size;
		sum=0;
		count_crt=1;
		current_amp[count_crt]=crtvalue;
		sum += current_amp[count_crt];
		count_crt++;
	}
	
	// i_new = crtvalue;
	// i_new = 0.2*i_new + 0.8*i_pre;
	i_pre = i_new;
	current.data = i_pre;
	//current.data = crtvalue;
	crt.publish(&current);
	vtg.publish(&voltage);
}

//buffer and filter
// value = analogRead(A0);
// vtgvalue = float(value)/1024*5;
// voltage.data = vtgvalue;
// crtvalue= (abs(vtgvalue - 2.4375))/0.185;
// i_new = crtvalue;
// if(count_crt<buffer_size)
// {
// current_amp[count_crt] = float(crtvalue);
// sum += current_amp[count_crt];
// count_crt++;
// }
// else if(count_crt==buffer_size)
// {
// i_new = sum/buffer_size;
// sum=0;
// count_crt=1;
// current_amp[count_crt]=crtvalue;
// sum += current_amp[count_crt];
// count_crt++;
// }
//exponential filter
// ADCFilter.Filter(value);
// smooth = ADCFilter.Current();
// x_new = value;
// i_new = 0.2*i_new+0.8*i_pre;


//Publishers


// voltage.data = float(value)/1024*5;
// i_pre = i_new;
// current.data = i_pre;
// current.data = (abs(voltage.data - 2.4375))/0.185;
// crt.publish(&current);
// vtg.publish(&voltage);
//}


//Subscribers and callback functions
ros::Subscriber<std_msgs::Float32> sub2("Vel_ctl/wl", &left_vel);


//MAIN LOOP
void setup()
{
	//Initialize ROS node handler (subscribe and advertise topics)
	nh.initNode();
	// Serial.begin(57600);
	nh.subscribe(sub2);
	nh.advertise(W_l);
	nh.advertise(cnt_left);
	nh.advertise(crt);
	nh.advertise(vtg);
	//Serial.begin(9600);
	
	//Set up pins for H-Bridge
	servo.attach(10); //attach it to pin 10 for arduino mega
	// Port Configuration for encoders
	DDRD = DDRD | 0x00;
	PORTD = 0b00001111;
	
	//Set Interrupts for encoders -Left
	attachInterrupt(digitalPinToInterrupt(21), HandleLeftMotorInterruptA, CHANGE);
	attachInterrupt(digitalPinToInterrupt(20), HandleLeftMotorInterruptB, CHANGE);
	
	//Set interrupts for timer - only once!
	TIMSK2 &= ~(1<<TOIE2);
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
	TCCR2B &= ~(1<<WGM22);
	TCCR2B |= (1<<CS21);
	TCCR2B &= ~(1<<CS20);
	TCCR2B &= ~(1<<CS22);
	ASSR &= ~(1<<AS2);
	TIMSK2 &= ~((1<<OCIE2A) | ~(1<<OCIE2B));
	TCNT2 = tcnt2; // defined as 130
	TIMSK2 |= (1<<TOIE2);

	//Initialize Variables
	vel_window = 10;
	left_encoder_vec[0] = 0;
	time_vector[0]=0;
	//current_time=micros();
	//previous_time=micros();
}


//MAIN PROGRAM
void loop()
{
	// float crtvalue;
	// float vtgvalue;
	// value = analogRead(A0);
	//vtgvalue = float(value)/1024*5;
	//voltage.data = vtgvalue;
	// crtvalue = (abs(vtgvalue - 2.5))/0.185;
	// i_new = crtvalue;
	// i_new = 0.2*i_new + 0.8*i_pre;
	// i_pre = i_new;
	// current.data = i_pre;
	// crt.publish(&current);
	// vtg.publish(&voltage);
	read_current();
	nh.spinOnce();
	read_sensors();
	// read_current();
	// wl=1500;
	// servo.writeMicroseconds(wl);
	delay(1);
}

// Interrupt service routines for the left motor's quadrature encoder
//Channel A
void HandleLeftMotorInterruptA()
{
	_LeftEncoderBSet = PIND & (1<<PD0);
	_LeftEncoderASet = PIND & (1<<PD1);
	_LeftEncoderTicks+=ParseEncoder_L();
	_LeftEncoderAPrev = _LeftEncoderASet;
	_LeftEncoderBPrev = _LeftEncoderBSet;
}

//Channel B
void HandleLeftMotorInterruptB()
{
	_LeftEncoderBSet = PIND & (1<<PD0);
	_LeftEncoderASet = PIND & (1<<PD1);
	_LeftEncoderTicks+=ParseEncoder_L();
	_LeftEncoderAPrev = _LeftEncoderASet;
	_LeftEncoderBPrev = _LeftEncoderBSet;
}

// Logic for left encoder count
long ParseEncoder_L()
{
	if(_LeftEncoderAPrev && _LeftEncoderBPrev)
	{
		if(!_LeftEncoderASet && _LeftEncoderBSet) 
			return 1;		
		if(_LeftEncoderASet && !_LeftEncoderBSet) 
			return -1;
	}
	else if(!_LeftEncoderAPrev && _LeftEncoderBPrev)
	{
		if(!_LeftEncoderASet && !_LeftEncoderBSet) 
			return 1;
		if(_LeftEncoderASet && _LeftEncoderBSet) 
			return -1;
	}
	else if(!_LeftEncoderAPrev && !_LeftEncoderBPrev)
	{
		if(_LeftEncoderASet && !_LeftEncoderBSet) 
			return 1;
		if(!_LeftEncoderASet && _LeftEncoderBSet) 
			return -1;
	}
	else if(_LeftEncoderAPrev && !_LeftEncoderBPrev)
	{
		if(_LeftEncoderASet && _LeftEncoderBSet) 
			return 1;
		if(!_LeftEncoderASet && !_LeftEncoderBSet) 
			return -1;
	}
	return 0;
}

//Saturation function (x>1 or x<-1)
float saturation (float x)
{
	if (x>1)
		return 1;
	else if (x<-1)
		return -1;
	else
		return x;
}

//Timer Function
ISR(TIMER2_OVF_vect) {
}